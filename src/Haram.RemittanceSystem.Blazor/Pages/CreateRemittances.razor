@page "/createremittance"
@using Haram.RemittanceSystem.Currencies
@using Haram.RemittanceSystem.Customers
@using Haram.RemittanceSystem.Localization
@using Volo.Abp.Application.Dtos
@using Haram.RemittanceSystem.Remittances
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using Haram.RemittanceSystem.RemittanceTypes
@inject ICurrencyAppService currencyappservice
@inject ICustomerAppService customerappservice
@inject IRemittanceAppServices remittanceappservice
@inject IStringLocalizer<RemittanceSystemResource> L
@inject AbpBlazorMessageLocalizerHelper<RemittanceSystemResource> LH
@inherits AbpCrudPageBase<IRemittanceAppServices, RemittanceDto, Guid, GetListRemittancesInputDto, CreateUpdateRemittanceDto>



        <Form>
            <ModalHeader>
                <ModalTitle>@L["New Remittance"]</ModalTitle>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                                <FieldLabel>Serial number</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.SerialNo">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                <Field>
                    <FieldLabel>@L["Type"]</FieldLabel>
                    <Select TValue="RemittanceType" @bind-SelectedValue="@NewEntity.Type">
                        @foreach (int bookTypeValue in Enum.GetValues(typeof(RemittanceType)))
                    {
                        <SelectItem TValue="RemittanceType" Value="@((RemittanceType) bookTypeValue)">
                            @bookTypeValue
                        </SelectItem>
                    }
                </Select>
            </Field>

            <Field>
                <FieldLabel>@L["Currency"]</FieldLabel>
                    <Select TValue="Guid" @bind-SelectedValue="@NewEntity.CurrencyID">
                        @foreach (var c in Currencies)
                    {
                        <SelectItem TValue="Guid" Value="@((Guid) c.Id)">
                            @L[$"{@c.Name}||{@c.AlphabeticCode}"]
                        </SelectItem>
                    }
                </Select>
            </Field>

            <Field>
                <FieldLabel>@L["Sender"]</FieldLabel>
                    <Select TValue="Guid" @bind-SelectedValue="@NewEntity.SenderId">
                        @foreach (var c in Customers)
                    {
                        <SelectItem TValue="Guid" Value="@((Guid) c.Id)">
                            @L[$"{@c.FirstName} {@c.LastName}"]
                        </SelectItem>
                    }
                </Select>
            </Field>
                    <Field>
                        <FieldLabel>@L["Amount"]</FieldLabel>
                        <NumericEdit TValue="double" @bind-Value="NewEntity.Amount"/>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>

                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>

    @code{
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    public ICollection<CurrencyDto> Currencies { get; set; }
    public ICollection<CustomerDto> Customers { get; set; }
    public NavigationManager navigationManager;
    protected override async Task OnInitializedAsync()
    {
        Currencies = (await currencyappservice.GetListAsync(new PagedAndSortedResultRequestDto())).Items.ToList();
        Customers = (await customerappservice.GetListAsync(new PagedAndSortedResultRequestDto())).Items.ToList();

    }
    protected override Task OnCreatedEntityAsync()
    {
        NavigationManager.NavigateTo("");
        return null;
    }
}