@page "/remittances"
@using Haram.RemittanceSystem.Currencies
@using Haram.RemittanceSystem.Customers
@using Haram.RemittanceSystem.Localization
@using Volo.Abp.Application.Dtos
@using Haram.RemittanceSystem.Remittances
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using Haram.RemittanceSystem.RemittanceTypes
@inject ICurrencyAppService currencyappservice
@inject ICustomerAppService customerappservice
@inject IRemittanceAppServices remittanceappservice
@inject IStringLocalizer<RemittanceSystemResource> L
@inject AbpBlazorMessageLocalizerHelper<RemittanceSystemResource> LH
@inherits AbpCrudPageBase<IRemittanceAppServices, RemittanceDto, Guid, GetListRemittancesInputDto, CreateUpdateRemittanceDto>

<Card>
-        <CardHeader>
            <Row Class="justify-content-between">
                <Column ColumnSize="ColumnSize.IsAuto">
                    <h2>Remittances</h2>
                </Column>
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Button Color="Color.Primary"
                            Clicked="OpenCreateModalAsync">
                        NewBook
                    </Button>
                </Column>

            <Column ColumnSize="ColumnSize.IsAuto">
             <Label> Type</Label>
            <Select TValue="RemittanceType"   @bind-SelectedValue=@type >
                    <SelectItem TValue="RemittanceType" >
                        None
                    </SelectItem>
                @foreach (int type in Enum.GetValues(typeof(RemittanceType)))
                {
                        <SelectItem TValue="RemittanceType" Value="@((RemittanceType) type)">
                            @type.ToString()
                    </SelectItem>
                }
            </Select>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Label> Status</Label>
                <Select TValue="StatusTypes.StatusType " @bind-SelectedValue="@statusType" >
                    <SelectItem TValue="StatusTypes.StatusType" Value="@((StatusTypes.StatusType) statusType)">

                    </SelectItem>
                    @foreach (int status in Enum.GetValues(typeof(StatusTypes.StatusType)))
                    {
                        <SelectItem TValue="StatusTypes.StatusType" Value="@((StatusTypes.StatusType) status)">
                            @status
                        </SelectItem>
                    }
                </Select>
            </Column>

            </Row>
            <Button @onclick=applyFilter>Click</Button>
        </CardHeader>
    <CardBody>
        <DataGrid TItem="RemittanceDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize"
                  >

            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="RemittanceDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="RemittanceDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="RemittanceDto"
                                          Text="Edite"
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="RemittanceDto"
                                          Text="Delete]"
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="()=>GetDeleteConfirmationMessage(context)" />


                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridEntityActionsColumn TItem="RemittanceDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <Blazorise.Button Clicked="()=>SetAsReady(context)" Color="Blazorise.Color.Secondary">set</Blazorise.Button>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Type)"
                                Caption="Type">
                    <DisplayTemplate>
                        @context.Type
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.CreationTime)"
                                Caption="CreationTime">
                    <DisplayTemplate>
                        @context.CreationTime.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Amount)"
                                Caption="Amount">
                </DataGridColumn>
    

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["New Remittance"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                                <FieldLabel>Serial number</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.SerialNo">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>

                        <Field>
                            <FieldLabel>@L["Type"]</FieldLabel>
                            <Select TValue="RemittanceType" @bind-SelectedValue="@NewEntity.Type">
                                @foreach (int bookTypeValue in Enum.GetValues(typeof(RemittanceType)))
                            {
                                <SelectItem TValue="RemittanceType" Value="@((RemittanceType) bookTypeValue)">
                                    @bookTypeValue
                                </SelectItem>
                            }
                        </Select>
                    </Field>

                    <Field>
                        <FieldLabel>@L["Currency"]</FieldLabel>
                            <Select TValue="Guid" @bind-SelectedValue="@NewEntity.CurrencyID">
                                @foreach (var c in Currencies)
                            {
                                <SelectItem TValue="Guid" Value="@((Guid) c.Id)">
                                    @L[$"{@c.Name}||{@c.AlphabeticCode}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>

                    <Field>
                        <FieldLabel>@L["Sender"]</FieldLabel>
                            <Select TValue="Guid" @bind-SelectedValue="@NewEntity.SenderId">
                                @foreach (var c in Customers)
                            {
                                <SelectItem TValue="Guid" Value="@((Guid) c.Id)">
                                  @L[$"{@c.FirstName} {@c.LastName}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>

                    <Field>
                        <FieldLabel>@L["Amount"]</FieldLabel>
                        <NumericEdit TValue="double" @bind-Value="NewEntity.Amount"/>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

