@page "/approvedremittances"
@using Haram.RemittanceSystem.Currencies
@using Haram.RemittanceSystem.Customers
@using Haram.RemittanceSystem.Localization
@using Haram.RemittanceSystem.StatusTypes
@using Volo.Abp.Application.Dtos
@using Haram.RemittanceSystem.Remittances
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using Haram.RemittanceSystem.RemittanceTypes
@inject ICurrencyAppService currencyappservice
@inject ICustomerAppService customerappservice
@inject IRemittanceAppServices remittanceappservice
@inject IStringLocalizer<RemittanceSystemResource> L
@inject AbpBlazorMessageLocalizerHelper<RemittanceSystemResource> LH
@inherits AbpCrudPageBase<IRemittanceAppServices, RemittanceDto, Guid, GetListRemittancesInputDto, CreateUpdateRemittanceDto>

<Card>
    -        <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["ApprovedRemittances"] </h2>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="RemittanceDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize"
                  >

            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="RemittanceDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <Blazorise.Button Clicked="()=> OpenReleaseModalAsync(context)" Color="Blazorise.Color.Secondary">@L["SetRelease"]</Blazorise.Button>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>


                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Type)"
                                Caption=@L["Type"]>
                    <DisplayTemplate>
                            @L[$"Enum:RemittanceType.{(int)context.Type}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Amount)"
                                Caption=@L["Ammount"]>
                    <DisplayTemplate>
                        @context.Amount
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.TotalAmount)"
                                Caption=@L["TotalAmmount"]>
                    <DisplayTemplate>
                        @context.TotalAmount
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Caption=@L["Sender"]>
                    <DisplayTemplate>
                        @context.Sender.FirstName.ToString()-@context.Sender.LastName.ToString()
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.CreationTime)"
                                Caption=@L["CreationTime"]>
                    <DisplayTemplate>
                        @context.CreationTime.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.LastModificationTime)"
                                Caption=@L["LastModificationTime"]>
                    <DisplayTemplate>
                        @context.LastModificationTime
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Status)"
                                Caption=@L["Status"]>
                    <DisplayTemplate>
                        @L[$"Enum:StatusType.{(int)context.Status}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Caption=@L["ApprovedBy"]>
                    <DisplayTemplate>
                        @context.ApprovedBy.Name
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="@ReleasingModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@ReleasingRemittance.SerialNo</ModalTitle>
                    <CloseButton Clicked="HideReleasingRemittanceModal" />
            </ModalHeader>
            <ModalBody>
                    @{
                    sender = Customers.FirstOrDefault(x => x.Id == ReleasingRemittance.SenderId);
                     }
                <Validations @ref="@EditValidationsRef" Model="@ReleasingRemittance" ValidateOnLoad="false">
                        <Field >
                            <FieldLabel>@L["Type"]</FieldLabel>
                            <TextEdit Text=@L[$"Enum:RemittanceType.{(int)ReleasingRemittance.Type}"]
                                  Disabled />
                    </Field>
                         <Field>
                             <FieldLabel>@L["SerialNumber"]</FieldLabel >
                                <TextEdit @bind-Text="@ReleasingRemittance.SerialNo" Disabled>
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                            <Card>
                                <CardTitle>@L["SenderInformation"]</CardTitle>
                                <CardBody Border="Border.Dark" Padding="Padding.Is5" >
                                    <Div Margin="Margin.Is3">
                                    <Field>
                        <FieldLabel>@L["FirstName"]</FieldLabel>
                            <TextEdit @bind-Text="@ReleasingRemittance.Sender.FirstName" Disabled>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>@L["LastName"]</FieldLabel>
                            <TextEdit @bind-Text="@ReleasingRemittance.Sender.LastName" Disabled>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>@L["FatherName"]</FieldLabel>
                            <TextEdit @bind-Text="@ReleasingRemittance.Sender.FatherName" Disabled>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>@L["Phone"]</FieldLabel>
                            <TextEdit @bind-Text="@ReleasingRemittance.Sender.FatherName" Disabled>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                            </Div>
                        </CardBody>
                    </Card>
                    <Field>
                        <FieldLabel>@L["Currency"]</FieldLabel>
                            <TextEdit @bind-Text="@ReleasingRemittance.currency.AlphabeticCode" Disabled>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>

                    <Field>
                         <FieldLabel>@L["Ammount"]</FieldLabel>
                            <NumericEdit TValue="double" @bind-Value="ReleasingRemittance.Amount" Disabled />
                     </Field>

                     <Field>
                         <FieldLabel>@L["TotalAmmount"]</FieldLabel>
                            <NumericEdit TValue="double" @bind-Value="ReleasingRemittance.TotalAmount" Disabled />
                     </Field>
                     <Card>
                         <CardTitle>@L["ReceiverInformation"]</CardTitle>
                            <CardBody Border="Border.Dark" Padding="Padding.Is5">
                                <Div Margin="Margin.Is3">
                                    <Field>
                                        <FieldLabel>@L["FirstName"]</FieldLabel>
                                        <TextEdit @bind-Text="@ReleasingRemittance.ReceiverFirstName" Disabled>
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                                <Field>
                                    <FieldLabel>@L["LastName"]</FieldLabel>
                                        <TextEdit @bind-Text="@ReleasingRemittance.ReceiverLirstName" Disabled>
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                                <Field>
                                    <FieldLabel>@L["FatherName"]</FieldLabel>
                                        <TextEdit @bind-Text="@ReleasingRemittance.ReceiverPhone" Disabled>
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                            </Div>
                        </CardBody>
                    </Card>
                     <Card Background="Background.Dark" WhiteText Padding="Padding.Is5" Margin="Margin.Is2">
                         <CardBody Margin="Margin.Is1">
                        <CardTitle Size="3">
                            @L["Receiver"]
                        </CardTitle>
                     <Row>
                         <Column>
                             <Field>
                                 <FieldLabel>@L["Search the Name"]</FieldLabel>
                                    <TextEdit @bind-Text="@name" onchange="@OnNameOrPhoneSearchBoxChange" Disabled=IsSelectActive>
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                            </Column>
                                    <Column>
                                        <Field>
                                            <FieldLabel>@L["Search the Name"]</FieldLabel>
                                            <TextEdit @bind-Text="@PhoneSearchBox" onchange="@OnNameOrPhoneSearchBoxChange" Disabled=IsSelectActive>
                                                <Feedback>
                                                    <ValidationError />
                                                </Feedback>
                                            </TextEdit>
                                        </Field>
                                    </Column>
                         <Column>
                             <Button Color="Color.Primary"
                                     Clicked="ShowModal"
                                      Style="width:min-content "
                                      
                             Size="Size.Small">
                                 @L["NewCustomer"]
                            </Button>
                        </Column>
                    </Row>
                    
                        <Field >
                            <FieldLabel>@L["Receiver"]</FieldLabel>
                                    <Select TValue="Guid?" @bind-SelectedValue="@ReleasingRemittance.ReceiverId" Disabled=IsSelectActive>
                                @foreach (var c in Receivers)
                            {
                                <SelectItem TValue="Guid" Value="@((Guid) c.Id)">
                                    @L[$"{@c.FirstName} {@c.LastName}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                        </CardBody>
                    </Card>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="HideReleasingRemittanceModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="SetAsReleased">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="CreateCustomerModal">
    <ModalContent Centered>
        <Form>
       <ModalHeader>
                <ModalTitle>@L["NewCustomer"]</ModalTitle>
                    <CloseButton Clicked="HideModal" />
            </ModalHeader>
            <ModalBody>
                    <Validations @ref="@CreateValidationsRef" Model="@NewCustomerReceiver" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                                <FieldLabel>@L["FirstName"]</FieldLabel>
                            <TextEdit @bind-Text="@NewCustomerReceiver.FirstName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                            </TextEdit>
                        </Field>
                        </Validation>


                            <Field>
                                <FieldLabel>@L["LastName"]</FieldLabel>
                        <TextEdit @bind-Text="@NewCustomerReceiver.LastName">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                                </TextEdit>
                            </Field>

                                <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["FatherName"]</FieldLabel>
                        <TextEdit @bind-Text="@NewCustomerReceiver.FatherName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["MotherName"]</FieldLabel>
                                <TextEdit @bind-Text="@NewCustomerReceiver.MotherName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>


                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["Gender"]</FieldLabel>
                                <Select TValue="Genders.Gender" @bind-SelectedValue="@NewCustomerReceiver.CustGender">

                                    @foreach (int gender in Enum.GetValues(typeof(Genders.Gender)))
                                {
                                    <SelectItem TValue="Genders.Gender" Value="@((Genders.Gender) gender)">
                                        @L[$"Enum:Gender.{(int)gender}"]

                                    </SelectItem>

                                }

                            </Select>

                        </Field>
                    </Validation>

           
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["BirthDate"]</FieldLabel>
                                <Addons>
                                    <Addon AddonType="AddonType.Body">
                                        <DatePicker @ref="@datePicker" TValue="DateTime" @bind-Date="@NewCustomerReceiver.BirthDate" />
                                    </Addon>
                                    <Addon AddonType="AddonType.End">
                                        <Button Color="Color.Light" Clicked="@(()=>datePicker.ToggleAsync())">
                                            <Icon Name="IconName.CalendarDay" />
                                        </Button>
                                    </Addon>
                                </Addons>
                            </Field>
                        </Validation>

           
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["Address"]</FieldLabel>
                                <TextEdit @bind-Text="@NewCustomerReceiver.Address">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>

 
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["Phone"]</FieldLabel>
                                <TextEdit @bind-Text="@NewCustomerReceiver.Phone">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>

       
                    </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                            Clicked="HideModal">
                        @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateCustomerAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>


@code {

    public Modal? ReleasingModal { get; set; }
    private Modal CreateCustomerModal;
    DatePicker<DateTime> datePicker;
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public ICollection<CurrencyDto> Currencies { get; set; }

    public ICollection<CustomerDto> Customers { get; set; }

    public IEnumerable<CustomerDto> Receivers { get; set; }

    public RemittanceDto ReleasingRemittance { get; set; } = new RemittanceDto() { Sender = new CustomerDto() {} , currency = new CurrencyDto() { } };

    public CustomerDto sender { get; set; } = new CustomerDto() {FirstName ="non" };
    public CreateUpdateCustomerDto NewCustomerReceiver { get; set; } = new CreateUpdateCustomerDto();
    private Validations CreateValidationsRef;

    public string name { get; set; }
    public string PhoneSearchBox { get; set; }
    public bool searchBoxIsActive { get; set; } = true;
    public bool IsSelectActive { get; set; } = false;

    // overriding the OnInitializedAsync
    protected override async Task OnInitializedAsync()
    {
        Currencies = (await currencyappservice.GetListAsync(new PagedAndSortedResultRequestDto())).Items.ToList();
        Customers = (await customerappservice.GetListAsync(new PagedAndSortedResultRequestDto())).Items.ToList();
        Receivers = Customers.ToList();

    }

    // to get Approved remittances 
    private async Task GetRemittencAsync()
    {
        GetListInput.Status = StatusType.Approved;
        var result = await AppService.GetListAsync(
            GetListInput
            );
        Entities = result.Items;
        TotalCount = (int)result.TotalCount;
    }

    // overriding the OnDataGridReadAsync
    protected override async Task OnDataGridReadAsync(DataGridReadDataEventArgs<RemittanceDto> e)
    {
        //_logger.LogInformation("On Data Grid executed");
        await GetRemittencAsync();
        await InvokeAsync(StateHasChanged);
    }

    // Set the status of the approved remittances to released with taking the receiver ID
    private async Task SetAsReleased()
    {
        await AppService.ChangeStatus(ReleasingRemittance.Id, ReleasingRemittance.ReceiverId);
        await GetRemittencAsync();
        await InvokeAsync(StateHasChanged);
        InvokeAsync(ReleasingModal.Hide);

    }
    // to show create Customer Modal
    private Task ShowModal()
    {
        return CreateCustomerModal.Show();
    }
    // to Hide create Customer Modal
    private Task HideModal()
    {
        return CreateCustomerModal.Hide();
    }
    // to show Releasing Remittence Modal
    private Task ShowReleasingRemittanceModal()
    {
        return ReleasingModal.Show();
    }
    // to Hide Releasing Remittence Modal
    private Task HideReleasingRemittanceModal()
    {
        return ReleasingModal.Hide();
    }

    // to Search for Reseiver Customer if it exist
    private async Task OnNameOrPhoneSearchBoxChange()
    {
        string[] nameParts = name.Split(' '); // Split full name into parts
        string firstName = nameParts[0];
        string lastName = nameParts.Length > 1 ? nameParts[1] : string.Empty;
        Receivers = Customers
       .WhereIf(!string.IsNullOrEmpty(lastName), x => x.FirstName.Contains(firstName) || x.LastName.Contains(lastName))
       .WhereIf(string.IsNullOrEmpty(lastName), x => x.FirstName.Contains(firstName) || x.LastName.Contains(firstName))
       .WhereIf(!string.IsNullOrEmpty(PhoneSearchBox), x => x.Phone.Contains(PhoneSearchBox))
       .ToList();
    }
    // on Create Customer from the create Customer Model
    private async Task CreateCustomerAsync()
    {
        if (await CreateValidationsRef.ValidateAll())
        {
            var result =  await customerappservice.CreateAsync(NewCustomerReceiver);
            this.Customers.Add(result);
            Receivers = (Customers.Where(x=>x.Id ==result.Id)).ToList();
            IsSelectActive = true;
            ReleasingRemittance.ReceiverId = result.Id;
            CreateCustomerModal.Hide();
        }

    }
    // to Show to Releasing Remittence Modal and bind the Entity
    protected virtual async Task OpenReleaseModalAsync(RemittanceDto entity)
    {
        try
        {
            var entityDto = await AppService.GetAsync(entity.Id);
            ReleasingRemittance.Id = entity.Id;
            ReleasingRemittance = entity;
            ReleasingRemittance.Sender = entity.Sender;

            await InvokeAsync(async () =>
            {
                StateHasChanged();
                if (ReleasingModal != null)
                {
                    await ReleasingModal.Show();
                }
            });
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
}


