@page "/approvedremittances"
@using Haram.RemittanceSystem.Currencies
@using Haram.RemittanceSystem.Customers
@using Haram.RemittanceSystem.Localization
@using Haram.RemittanceSystem.StatusTypes
@using Volo.Abp.Application.Dtos
@using Haram.RemittanceSystem.Remittances
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using Haram.RemittanceSystem.RemittanceTypes
@inject ICurrencyAppService currencyappservice
@inject ICustomerAppService customerappservice
@inject IRemittanceAppServices remittanceappservice
@inject IStringLocalizer<RemittanceSystemResource> L
@inject AbpBlazorMessageLocalizerHelper<RemittanceSystemResource> LH
@inherits AbpCrudPageBase<IRemittanceAppServices, RemittanceDto, Guid, GetListRemittancesInputDto, CreateUpdateRemittanceDto>

<Card>
    -        <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["ApprovedRemittances"] </h2>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="RemittanceDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize"
                  >

            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="RemittanceDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <Blazorise.Button Clicked="()=> OpenEditModalAsync(context)" Color="Blazorise.Color.Secondary">@L["SetRelease"]</Blazorise.Button>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>


                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Type)"
                                Caption=@L["Type"]>
                    <DisplayTemplate>
                            @L[$"Enum:RemittanceType.{(int)context.Type}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Amount)"
                                Caption=@L["Ammount"]>
                    <DisplayTemplate>
                        @context.Amount
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.TotalAmount)"
                                Caption=@L["TotalAmmount"]>
                    <DisplayTemplate>
                        @context.TotalAmount
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Caption=@L["Sender"]>
                    <DisplayTemplate>
                        @context.Sender.FirstName.ToString()-@context.Sender.LastName.ToString()
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.CreationTime)"
                                Caption=@L["CreationTime"]>
                    <DisplayTemplate>
                        @context.CreationTime.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.LastModificationTime)"
                                Caption=@L["LastModificationTime"]>
                    <DisplayTemplate>
                        @context.LastModificationTime
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Status)"
                                Caption=@L["Status"]>
                    <DisplayTemplate>
                        @L[$"Enum:StatusType.{(int)context.Status}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Caption=@L["ApprovedBy"]>
                    <DisplayTemplate>
                        @context.ApprovedBy.Name
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.SerialNo</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                    @{
                    Receivers = Customers.Where(x=>x.Id != EditingEntity.SenderId);
                    sender = Customers.FirstOrDefault(x => x.Id == EditingEntity.SenderId);
                }
                    <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                        <Field >
                            <FieldLabel>@L["Type"]</FieldLabel>
                            <TextEdit Text=@L[$"Enum:RemittanceType.{(int)EditingEntity.Type}"]
                                  Disabled />
                    </Field>

                     <Field>
                         <FieldLabel>@L["Ammount"]</FieldLabel>
                            <NumericEdit TValue="double" @bind-Value="EditingEntity.Amount" Disabled />
                     </Field>

                     <Field>
                         <FieldLabel>@L["TotalAmmount"]</FieldLabel>
                            <NumericEdit TValue="double?" @bind-Value="EditingEntity.TotalAmount" Disabled />
                     </Field>
                        <Field >
                            <FieldLabel>@L["Receiver"]</FieldLabel>
                            <Select TValue="Guid?" @bind-SelectedValue="@EditingEntity.ReciverId" >
                                @foreach (var c in Receivers)
                            {
                                <SelectItem TValue="Guid" Value="@((Guid) c.Id)">
                                    @L[$"{@c.FirstName} {@c.LastName}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="SetAsReleased">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {

    public Modal? AprrovedModal { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public ICollection<CurrencyDto> Currencies { get; set; }

    public ICollection<CustomerDto> Customers { get; set; }

    public IEnumerable<CustomerDto> Receivers { get; set; }

    public CustomerDto sender { get; set; } = new CustomerDto() {FirstName ="non" };

    protected Modal? ApprovedRemittanceModal;

    // overriding the OnInitializedAsync
    protected override async Task OnInitializedAsync()
    {
        Currencies = (await currencyappservice.GetListAsync(new PagedAndSortedResultRequestDto())).Items.ToList();
        Customers = (await customerappservice.GetListAsync(new PagedAndSortedResultRequestDto())).Items.ToList();

    }

    // to get Approved remittances 
    private async Task GetRemittencAsync()
    {
        GetListInput.Status = StatusType.Approved;
        var result = await AppService.GetListAsync(
            GetListInput
            );
        Entities = result.Items;
        TotalCount = (int)result.TotalCount;
    }

    // overriding the OnDataGridReadAsync
    protected override async Task OnDataGridReadAsync(DataGridReadDataEventArgs<RemittanceDto> e)
    {
        //_logger.LogInformation("On Data Grid executed");
        await GetRemittencAsync();
        await InvokeAsync(StateHasChanged);
    }

    // Set the status of the approved remittances to released with taking the receiver ID
    private async Task SetAsReleased()
    {
        await AppService.ChangeStatus(EditingEntity.Id.Value, EditingEntity.ReciverId);
        await GetRemittencAsync();
        await InvokeAsync(StateHasChanged);
        InvokeAsync(EditModal.Hide);

    }


}


