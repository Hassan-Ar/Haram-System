@page "/readyremittances"
@using Haram.RemittanceSystem.Currencies
@using Haram.RemittanceSystem.Customers
@using Haram.RemittanceSystem.Localization
@using Haram.RemittanceSystem.Permissions
@using Haram.RemittanceSystem.StatusTypes
@using Volo.Abp.Application.Dtos
@using Haram.RemittanceSystem.Remittances
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using Haram.RemittanceSystem.RemittanceTypes
@attribute [Authorize(RemittanceSystemPermissions.Remittances.Default)]
@inject ICurrencyAppService currencyappservice
@inject ICustomerAppService customerappservice
@inject IRemittanceAppServices remittanceappservice
@inject IStringLocalizer<RemittanceSystemResource> L
@inject AbpBlazorMessageLocalizerHelper<RemittanceSystemResource> LH
@inherits AbpCrudPageBase<IRemittanceAppServices, RemittanceDto, Guid, GetListRemittancesInputDto, CreateUpdateRemittanceDto>

<Card>
    -        <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["ReadyRemittances"]</h2>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="RemittanceDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize"
      >

            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="RemittanceDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        @if (CanSetApproveRemittance) {
                            <Blazorise.Button Clicked="()=>OpenSetApproveModalAsync(context)" Color="Blazorise.Color.Secondary"  >@L["SetApproved"]</Blazorise.Button>
                        }
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Type)"
                                Caption=@L["SerialNumber"]>
                    <DisplayTemplate>
                        @context.SerialNo
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Type)"
                                Caption=@L["Type"]>
                    <DisplayTemplate>
                        @L[$"Enum:RemittanceType.{(int)context.Type}"]
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Amount)"
                                Caption=@L["Ammount"]>
                    <DisplayTemplate>
                        @context.Amount
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.TotalAmount)"
                                Caption=@L["TotalAmmount"]>
                    <DisplayTemplate>
                        @context.TotalAmount
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Caption="@L["Sender"]">
                    <DisplayTemplate>
                        @context.Sender.FirstName.ToString()-@context.Sender.LastName.ToString()
                    </DisplayTemplate>
                </DataGridColumn>



                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.LastModificationTime)"
                                Caption=@L["LastModificationTime"]>
                    <DisplayTemplate>
                        @context.LastModificationTime
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Status)"
                                Caption=@L["Status"]>
                    <DisplayTemplate>
                        @L[$"Enum:StatusType.{(int)context.Status}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Caption="@L["IssuedBy"]">
                    <DisplayTemplate>
                        @context.IssuedBy.Name.ToString()
                    </DisplayTemplate>
                </DataGridColumn>


            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
<Modal @ref="@SetApproveModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@ApproveRemittance.SerialNo</ModalTitle>
                    <CloseButton Clicked="HideSetApproveRemittanceModal" />
            </ModalHeader>
            <ModalBody>
                    <Validations @ref="@EditValidationsRef" Model="@ApproveRemittance" ValidateOnLoad="false">
                        <Field >
                            <FieldLabel>@L["Type"]</FieldLabel>
                            <TextEdit Text=@L[$"Enum:RemittanceType.{(int)ApproveRemittance.Type}"]
                                  Disabled />
                    </Field>
                         <Field>
                             <FieldLabel>@L["SerialNumber"]</FieldLabel >
                            <TextEdit @bind-Text="@ApproveRemittance.SerialNo" Disabled>
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                    <Field>
                        <FieldLabel>@L["Currency"]</FieldLabel>
                            <TextEdit @bind-Text="@ApproveRemittance.currency.AlphabeticCode" Disabled>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>

                    <Field>
                        <FieldLabel>@L["Ammount"]</FieldLabel>
                            <NumericEdit TValue="double" @bind-Value="ApproveRemittance.Amount" Disabled />
                     </Field>

                     <Field>
                         <FieldLabel>@L["TotalAmmount"]</FieldLabel>
                            <NumericEdit TValue="double" @bind-Value="ApproveRemittance.TotalAmount" Disabled />
                     </Field>
                            <Card>
                                <CardTitle>@L["SenderInformation"]</CardTitle>
                                <CardBody Border="Border.Dark" Padding="Padding.Is5" >
                                    <Div Margin="Margin.Is3">
                                    <Field>
                        <FieldLabel>@L["FirstName"]</FieldLabel>
                                        <TextEdit @bind-Text="@ApproveRemittance.Sender.FirstName" Disabled>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>@L["LastName"]</FieldLabel>
                                        <TextEdit @bind-Text="@ApproveRemittance.Sender.LastName" Disabled>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>@L["FatherName"]</FieldLabel>
                                        <TextEdit @bind-Text="@ApproveRemittance.Sender.FatherName" Disabled>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>@L["Phone"]</FieldLabel>
                                        <TextEdit @bind-Text="@ApproveRemittance.Sender.Phone" Disabled>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                            </Div>
                        </CardBody>
                    </Card>

                    <Card>
                        <CardTitle>@L["ReceiverInformation"]</CardTitle>
                            <CardBody Border="Border.Dark" Padding="Padding.Is5">
                                <Div Margin="Margin.Is3">
                                    <Field>
                                        <FieldLabel>@L["FirstName"]</FieldLabel>
                                        <TextEdit @bind-Text="@ApproveRemittance.ReceiverFirstName" Disabled>
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                                <Field>
                                    <FieldLabel>@L["LastName"]</FieldLabel>
                                        <TextEdit @bind-Text="@ApproveRemittance.ReceiverLirstName" Disabled>
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                                <Field>
                                    <FieldLabel>@L["Phone"]</FieldLabel>
                                        <TextEdit @bind-Text="@ApproveRemittance.ReceiverPhone" Disabled>
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                            </Div>
                        </CardBody>
                    </Card>
   
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="HideSetApproveRemittanceModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="SetApprove">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
@code{
    public Modal? SetApproveModal;
    public RemittanceDto ApproveRemittance { get; set; } = new RemittanceDto() { Sender = new CustomerDto() { }, currency = new CurrencyDto() { } };
    public bool CanSetApproveRemittance { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await SetPermissionsAsync();
    }
    // to get ready remittances
    private async Task GetRemittencAsync()
    {
        GetListInput.Status = StatusType.Ready;
        var result = await AppService.GetListAsync(
            GetListInput
            );
        Entities = result.Items;
        TotalCount = (int)result.TotalCount;
    }

    // overriding OnDataGridReadAsync to get only ready remittances
    protected override async Task OnDataGridReadAsync(DataGridReadDataEventArgs<RemittanceDto> e)
    {
        await GetRemittencAsync();
        await InvokeAsync(StateHasChanged);
    }

    // to Hide SetReady Remittence Modal
    private Task HideSetApproveRemittanceModal()
    {
        return SetApproveModal.Hide();
    }

    // Set the status ready
    private async Task SetApprove()
    {
        await AppService.ChangeStatus(ApproveRemittance.Id, Guid.Empty);
        await GetRemittencAsync();
        await InvokeAsync(StateHasChanged);
        InvokeAsync(SetApproveModal.Hide);

    }
    // to set permissions
    protected override async Task SetPermissionsAsync()
    {

        CanSetApproveRemittance = await AuthorizationService
            .IsGrantedAsync(RemittanceSystemPermissions.Remittances.SetApproved);
    }
    // to open the set ready modal and pass the entity
    protected virtual async Task OpenSetApproveModalAsync(RemittanceDto entity)
    {
        try
        {
            var entityDto = await AppService.GetAsync(entity.Id);
            ApproveRemittance.Id = entity.Id;
            ApproveRemittance = entity;

            await InvokeAsync(async () =>
            {
                StateHasChanged();
                if (SetApproveModal != null)
                {
                    await SetApproveModal.Show();
                }
            });
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

}


