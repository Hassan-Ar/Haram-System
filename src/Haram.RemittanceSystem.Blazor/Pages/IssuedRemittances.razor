@page "/issuedremittances"
@using Haram.RemittanceSystem.Currencies
@using Haram.RemittanceSystem.Customers
@using Haram.RemittanceSystem.Localization
@using System.ComponentModel.DataAnnotations
@using Volo.Abp.Application.Dtos
@using Haram.RemittanceSystem.Remittances
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using Haram.RemittanceSystem.RemittanceTypes
@attribute [Authorize(RemittanceSystemPermissions.Remittances.Create)]
@using Haram.RemittanceSystem.Permissions
@using Microsoft.AspNetCore.Authorization
@inject ICurrencyAppService currencyappservice
@inject ICustomerAppService customerappservice
@inject IRemittanceAppServices remittanceappservice
@inject IStringLocalizer<RemittanceSystemResource> L
@inject AbpBlazorMessageLocalizerHelper<RemittanceSystemResource> LH
@inherits AbpCrudPageBase<IRemittanceAppServices, RemittanceDto, Guid, GetListRemittancesInputDto, CreateUpdateRemittanceDto>

<Card>
-        <CardHeader>
            <Row Class="justify-content-between">
                <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["IssuedRemittances"]</h2>
                </Column>

            </Row>
        </CardHeader>
    <CardBody>
        <DataGrid TItem="RemittanceDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize"
                  >

            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="RemittanceDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="RemittanceDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="RemittanceDto"
                                          Text=@L["Edit"]
                                          Visible=@CanEditRemittance
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="RemittanceDto"
                                          Text=@L["Delete"]
                                          Visible=@CanDeleteRemittance
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="()=>GetDeleteConfirmationMessage(context)" />
                            <EntityAction TItem="RemittanceDto"
                                          Text=@L["SetReady"]
                                          Visible=@CanSerReadyRemittance
                                          Clicked="() => SetAsReady(context)" />
                                                                              
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Type)"
                                Caption=@L["SerialNumber"]>
                    <DisplayTemplate>
                        @context.SerialNo
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Type)"
                                Caption=@L["Type"]>
                    <DisplayTemplate>
                        @L[$"Enum:RemittanceType.{(int)context.Type}"]
                    </DisplayTemplate>
                </DataGridColumn>


                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Amount)"
                                Caption=@L["Ammount"]>
                    <DisplayTemplate>
                        @context.Amount
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.TotalAmount)"
                                Caption=@L["TotalAmmount"]>
                    <DisplayTemplate>
                        @context.TotalAmount
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Caption=@L["Sender"]>
                    <DisplayTemplate>
                        @context.Sender.FirstName.ToString()-@context.Sender.LastName.ToString()
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.CreationTime)"
                                Caption=@L["CreationTime"]>
                    <DisplayTemplate>
                        @context.CreationTime.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.LastModificationTime)"
                                Caption=@L["LastModificationTime"]>
                    <DisplayTemplate>
                        @context.LastModificationTime
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Status)"
                                Caption=@L["Status"]>
                    <DisplayTemplate>
                        @L[$"Enum:StatusType.{(int)context.Status}"]
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewRemittance"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize"  >
                        <Field>
                                <FieldLabel>@L["SerialNumber"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.SerialNo">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>

                        <Field>
                            <FieldLabel>@L["Type"]</FieldLabel>
                            <Select TValue="RemittanceType" @bind-SelectedValue="@NewEntity.Type" Disabled=IsActiveRemittanceType onclick=@OnSelectType>
                                @foreach (int type in Enum.GetValues(typeof(RemittanceType)))
                            {
                                <SelectItem TValue="RemittanceType" Value="@((RemittanceType) type)">
                                    @L[$"Enum:RemittanceType.{type}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>

                    <Field>
                        <FieldLabel>@L["Currency"]</FieldLabel >
                            <Select TValue="Guid" @bind-SelectedValue="@NewEntity.CurrencyID" Disabled=IsActiveCurrency>
                                @foreach (var c in CurrenciesList)
                            {
                                <SelectItem TValue="Guid" Value="@((Guid) c.Id)">
                                    @L[$"{@c.Name}||{@c.AlphabeticCode}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>@L["Sender"]</FieldLabel>
                            <Select TValue="Guid" @bind-SelectedValue="@NewEntity.SenderId" >
                                @foreach (var c in Customers)
                            {
                                <SelectItem TValue="Guid" Value="@((Guid) c.Id)">
                                  @L[$"{@c.FirstName} {@c.LastName}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>

                    <Field>
                        <FieldLabel>@L["Ammount"]</FieldLabel>
                        <NumericEdit TValue="double" @bind-Value="NewEntity.Amount"/>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewRemittance"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize"  >
                        <Field>
                                <FieldLabel>@L["SerialNumber"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingEntity.SerialNo">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>

                        <Field>
                            <FieldLabel>@L["Type"]</FieldLabel>
                            <Select TValue="RemittanceType" @bind-SelectedValue="@EditingEntity.Type" Disabled=IsActiveRemittanceType onclick=@OnSelectType>
                                @foreach (int type in Enum.GetValues(typeof(RemittanceType)))
                            {
                                <SelectItem TValue="RemittanceType" Value="@((RemittanceType) type)">
                                    @L[$"Enum:RemittanceType.{type}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>

                    <Field>
                        <FieldLabel>@L["Currency"]</FieldLabel >
                            <Select TValue="Guid" @bind-SelectedValue="@EditingEntity.CurrencyID" Disabled=IsActiveCurrency>
                                @foreach (var c in CurrenciesList)
                            {
                                <SelectItem TValue="Guid" Value="@((Guid) c.Id)">
                                    @L[$"{@c.Name}||{@c.AlphabeticCode}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>@L["Sender"]</FieldLabel>
                            <Select TValue="Guid" @bind-SelectedValue="@EditingEntity.SenderId">
                                @foreach (var c in Customers)
                            {
                                <SelectItem TValue="Guid" Value="@((Guid) c.Id)">
                                  @L[$"{@c.FirstName} {@c.LastName}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>

                    <Field>
                        <FieldLabel>@L["Ammount"]</FieldLabel>
                            <NumericEdit TValue="double" @bind-Value="EditingEntity.Amount" />
                    </Field>
                </Validations>

            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
@code{

}